/*

  Sicherman Dice in Picat.

  From http://en.wikipedia.org/wiki/Sicherman_dice
  """ 
  Sicherman dice are the only pair of 6-sided dice which are not normal dice, 
  bear only positive integers, and have the same probability distribution for 
  the sum as normal dice.
  
  The faces on the dice are numbered 1, 2, 2, 3, 3, 4 and 1, 3, 4, 5, 6, 8.
  """

  I read about this problem in a book/column by Martin Gardner long
  time ago, and got inspired to model it now by the WolframBlog post
  "Sicherman Dice": http://blog.wolfram.com/2010/07/13/sicherman-dice/

  This model gets the two different ways, first the standard way and
  then the Sicherman dice:
  
  x1 = array1d(1..6, [1, 2, 3, 4, 5, 6]);
  x2 = array1d(1..6, [1, 2, 3, 4, 5, 6]);
  ----------
  x1 = array1d(1..6, [1, 2, 2, 3, 3, 4]);
  x2 = array1d(1..6, [1, 3, 4, 5, 6, 8]);


  Extra: If we also allow 0 (zero) as a valid value then the 
  following two solutions are also valid:
  
  x1 = array1d(1..6, [0, 1, 1, 2, 2, 3]);
  x2 = array1d(1..6, [2, 4, 5, 6, 7, 9]);
  ----------
  x1 = array1d(1..6, [0, 1, 2, 3, 4, 5]);
  x2 = array1d(1..6, [2, 3, 4, 5, 6, 7]);
  
  These two extra cases are mentioned here:
  http://mathworld.wolfram.com/SichermanDice.html


  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go =>
   _ = findall(_, $sicherman_dice(_X1a,_X2a,1)),
   _ = findall(_, $sicherman_dice(_X1b,_X2b,0)).
      

sicherman_dice(X1,X2, Min) =>
   printf("\nMin: %d\n", Min),

   N = 6,  % number of dice
   M = 10, % max value of each side
   % standard distribution of 2 pair of dice
   StandardDist = [1,2,3,4,5,6,5,4,3,2,1],


   X1 = new_list(N),
   X2 = new_list(N),
   X1 :: Min..M,
   X2 :: Min..M,

   % ensure standard distributions of the sums
   foreach(K in 1..10)
      StandardDist[K] #= sum([(X1[I]+X2[J] #= K+1) : I in 1..N, J in 1..N]) 
   end,

   % Symmetry breaking
   increasing(X1),
   increasing(X2),

   % x1 is less <= to x2
   foreach(I in 1..N) X1[I] #=< X2[I] end,


   Vars = X1 ++ X2,
   solve([ffd,split], Vars),

   writeln(X1),
   writeln(X2),
   nl.
   

increasing(List) =>
   foreach(I in 2..List.length) List[I-1] #=< List[I] end.

