/*

  Pancake sort in Picat.

  See 
   * http://en.wikipedia.org/wiki/Pancake_sorting
   * http://rosettacode.org/wiki/Sorting_algorithms/Pancake_sort


  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

main => go.

go =>
   
   Nums = [7,6,5,9,8,4,3,1,2,0],
   println([Nums,pancake_sort(Nums)]),
   nl.

go2 => 

   foreach(N in 1..3) 
      M = 10**N, 
      printf("M: %d\n", M),
      R1 = [random() mod M  : _I in 1..M],
      time(_S = pancake_sort(R1))
   end,   
   nl.

% comparison, using built-in sort
go3 => 
   foreach(N in 1..5) 
      M = 10**N, 
      println(M),
      R1 = [random() mod M  : _I in 1..M],
      time(_S = sort(R1))
   end,   
   nl.


pancake_sort(Nums) = Nums2 =>
    Nums2 = Nums,

    foreach(I in Nums.length..-1..1) 
       % find the index of the largest element not yet sorted
     
       [_ThisMax, MaxIdx] = find_max([Nums[J] : J in 1..I]),
    
       if MaxIdx != I then
          % flip this max element to index 1
          if (MaxIdx > 1) then
            Tmp := [Nums2[J] : J in 1..MaxIdx].reverse(),
            foreach(K in 1..MaxIdx)
               Nums2[K] := Tmp[K]
            end
          end,
    
          % then flip the max element to its place
          Tmp := [Nums2[J] : J in 1..I].reverse(),
          foreach(K in 1..I) 
             Nums2[K] := Tmp[K]
          end
       end
    end.


%
% find the (first) index of the max value 
% in a tuple.
find_max(A) = [ThisMax,MaxIdx] =>
  MaxIdx = 1,
  ThisMax = A[1],
  foreach(J in 2..A.length)
    if A[J] > ThisMax then
      ThisMax := A[J],
      MaxIdx := J
    end
  end.
