/*

  Count occurrences of a substring in Picat.

  From
  http://rosettacode.org/wiki/Count_occurrences_of_a_substring
  """
  The task is to either create a function, or show a built-in function, 
  to count the number of non-overlapping occurrences of a substring 
  inside a string. The function should take two arguments: the first 
  argument being the string to search and the second a substring to be 
  search for. It should return an integer count.
  
  print countSubstring("the three truths","th")
  3

  //  do not count substrings that overlap with previously-counted substrings:
  print countSubstring("ababababab","abab")
  2

  The matching should yield the highest number of non-overlapping matches. 
  In general, this essentially means matching from left-to-right or 
  right-to-left (see proof on talk page).
  """

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.

main => go.

go =>
   println(count_substrings("the three truths", "th")), % 3
   println(count_substrings("ababababab", "abab")),     % 2
   println(count_substrings("aaaaaaaaaaa", "aa")),      % 5
   println(count_substrings("aaaaaaaaaaa", "c")),       % 0
   nl.

go2 =>
   println("This is not correct but is included anyway...."),
   println(count_substrings2("the three truths", "th")), % 3
   println(count_substrings2("ababababab", "abab")),     % 2
   println(count_substrings2("aaaaaaaaaaa", "aa")),      % 5
   println(count_substrings2("aaaaaaaaaaa", "c")),       % 0
   nl.

count_substrings(S, SB) = C =>
   C1 = 0,
   I = 1,
   SLen = S.length,
   SBLen = SB.length,
   while (I < SLen, I+SBLen <= SLen)
     SS = [S[J] : J in I..I+SBLen-1],
     if SS == SB then
        C1 := C1 +1,
        I := I + SBLen
     else
        I := I+1
     end
   end,
   C = C1.


% Note: This use the built-in (and non-deterministric) predicate
%       find/4.
%       However, this is not correct - according to the specification of the
%       problem - since it count _all_ occurences, including all overlapping 
%       substrings.
%       It is included just for show.
%
count_substrings2(S, SB) = C => 
    L = findall([From,To], $find(S,SB,From,To)),
    writeln(L),
    C = L.length.

    

